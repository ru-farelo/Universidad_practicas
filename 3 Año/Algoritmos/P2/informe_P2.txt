AUTORES:
---------------------------------------------------------------------------
Rubén Fernández Farelo	| ruben.fernandez.farelo@udc.es
Lucía Costa López	| lucia.costa.lopez@udc.es
---------------------------------------------------------------------------
GRUPO DE PRÁCTICAS 3.2
---------------------------------------------------------------------------


ÍNDICE
________________________________

1. INTRODUCCIÓN
2. CARACTERÍSTICAS DE LA MÁQUINA
	2.1 Marca
	2.2 OS
	2.3 Kernel
	2.4 CPU
	2.5 Memoria principal
	2.6 Compilador
3. UNIDADES DE MEDIDA
4. METODOLOGÍA
5. RESULTADOS
6. CONCLUSIONES
________________________________



1. INTRODUCCIÓN

El problema consiste en ordenar ascendentemente un vector de n números enteros. Como algoritmos
de ordenación se utilizarán la ordenación por inserción y la ordenación shell. 
En esta práctica pretendemos determinar los tiempos de ejecución para distintos tamaños del 
vector y para tres diferentes situaciones iniciales: el vector ya está ordenado en orden
ascendente, el vector ya está ordenado pero en orden descendente, y el vector está inicialmente 
desordenado. También debemos calcular empíricamente las complejidades de los algoritmos para
cada una de las diferentes situaciones iniciales del vector .

2. CARACTERÍSTICAS DE LA MÁQUINA

  - Marca:		Acer
  - OS:			UBuntu 22.04.1 LTS 
  - Kernel: 		5.15.0-83-generic
  - CPU:		AMD Ryzen 3 2200U with Radeon Vega Mobile Gfx
  - Memoria:		12 Gb
  - Compilador: 	gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0
	


3. UNIDADES DE MEDIDA

Las medidas están realizadas en microsegundos. Si la medida del tiempo de ejecución es menor a 
500 microsegundos se realiza automáticamente un bucle de 1000 (k) iteraciones del algoritmo a 
analizar y se calcula la media de los tiempos tardados. En este caso se indicará con (<-) en la 
tabla.



4. METODOLOGÍA

Se realizan comprobaciones sobre dos algoritmos: inserción con una complejidad de O(n²) en el caso medio y peor caso, en el mejor caso
tendra una complejidad de O(n) . En cuanto a shell tendra una complejidad de O(n logn) en el mejor caso y caso medio , en cuanto al peor
caso sera un poco mayor a estas.

Para la comparación de tiempos de ejecución, se toman como referencia vectores ya ordenados en
orden ascendente, vectores ya ordenados pero en orden descendente, vectores que está 
inicialmente desordenados; de tamaño n igual a 500 hasta 640000.

Para la comprobación empírica de la complegidad teórica se utiliza una cota subestimada y otra 
sobreestimada para cada algoritmo.

	- Para ordenación por inserción, se usan la funciones:
	 	* Vector ascendente: O(n) con x = n, f(n) = n^0.8 para la cota 
	 	subestimada y f(n) = n^1.3 para la sobreestimada.
	 	
	 	* Vector descendente: O(n^2) con x = n^2, f(n) = n^1.8 para la cota 
	 	subestimada y f(n) = n^2.2 para la sobreestimada.
	 	
	 	* Vector aleatorio: O(n^2) con x = n^2, f(n) = n^1.8 para la cota 
	 	subestimada y f(n) = n^2.2 para la sobreestimada.
	 	
	 	
	- Para ordenación de shell, se usan la funciones:
 		* Vector ascendente: O(n^1.1) con x = n^1.1, f(n) = n^0.9 para la cota 
  		subestimada y f(n) = n^1.4 para la sobreestimada.
	 	
 		* Vector descendente: O(n^1.2) con x = n^1.2, f(n) = n para la cota 
  		subestimada y f(n) = n^1.4 para la sobreestimada.
	 	
 		* Vector aleatorio: O(n^1.1) con x = n^1.1, f(n) = n^0.9 para la cota 
  		subestimada y f(n) = n^1.4 para la sobreestimada.
	 	
El cálculo de los tiempos y la comprobación empírica mencionados anteriormente se realiza 
mediante las funciones tiempo_insAleatorio(v), tiempo_insAscendente(v) y
tiempo_insDescendente(v), para la ordenación por inserción, y las funciones 
tiempo_shellAleatorio(v), tiempo_shellAscendente(v) y tiempo_shellDescendente(v).

5. RESULTADOS

ORDENACION POR INSERCION *****inicializacion aleatoria*****
                  n                    t(n)                  t(n)/n^1.8               t(n)/n^2              t(n)/n^2.2                     k

                 500 (<-)            226.815000                0.005854             0.000907260            0.0002617808                 1000
                1000                 888.000000                0.007054             0.000888000            0.0002230555                    1
                2000                3507.000000                0.008574             0.000876750            0.0001917210                    1
                4000               14547.000000                0.010946             0.000909187            0.0001730778                    1
                8000               63857.000000                0.014790             0.000997766            0.0001653524                    1
               16000              244351.000000                0.017418             0.000954496            0.0001377051                    1
               32000              896518.000000                0.019670             0.000875506            0.0001099586                    1
                                                                                    Cte:0.0008
(<-)	: Filas con tiempos inferiores a 500 microsegundos(calculados midiendo los tiempos en 1000 ejecuciones que le llamamos k y haciendo la media de los mismos)
(*)	: Valores anómalos

ORDENACION POR INSERCION *****inicializacion ascendente*****
                  n                         t(n)                  t(n)/n^0.8               t(n)/n^1              t(n)/n^1.3                   k

                 500  (<-)                 3.307000                0.022922             0.006614000            0.0010251164                 1000
                1000  (<-)                 6.206000                0.024707             0.006206000            0.0007812891                 1000
                2000  (<-)                12.307000                0.028140             0.006153500            0.0006292355                 1000
                4000  (<-)                26.507000                0.034811             0.006626750            0.0005504053                 1000
                8000  (<-)                50.811000                0.038325             0.006351375            0.0004284901                 1000
               16000  (<-)               102.168000                0.044261             0.006385500            0.0003499121                 1000
               32000  (<-)               213.550000                0.053135             0.006673438            0.0002970329                 1000
               64000  (<-)               443.253000                0.063344             0.006925828            0.0002503904                 1000
										        Cte:0.006

(<-)	: Filas con tiempos inferiores a 500 microsegundos(calculados midiendo los tiempos en 1000 ejecuciones que le llamamos k y haciendo la media de los mismos)
(*)	: Valores anómalos

ORDENACION POR INSERCION *****inicializacion descendente*****
                  n                    t(n)                  t(n)/n^1.8               t(n)/n^2              t(n)/n^2.2                     k

                 500 (<-)            456.832000                0.006333             0.001827328            0.0005272572                 1000
                1000                1541.000000                0.006135             0.001541000            0.0003870817                    1
                2000                6310.000000                0.007214             0.001577500            0.0003449557                    1
                4000               24597.000000                0.008076             0.001537313            0.0002926511                    1
                8000              111372.000000                0.010501             0.001740187            0.0002883886                    1
               16000              438910.000000                0.011884             0.001714492            0.0002473498                    1
               32000             1852750.000000                0.014406             0.001809326            0.0002272411                    1
										    Cte:0.0017
(<-)	: Filas con tiempos inferiores a 500 microsegundos(calculados midiendo los tiempos en 1000 ejecuciones que le llamamos k y haciendo la media de los mismos)
(*)	: Valores anómalos

ORDENACION POR SHELL *****inicializacion aleatoria*****
                  n                    t(n)                  t(n)/n^0.9             t(n)/n^1.1              t(n)/n^1.4                     k

                 500 (<-)             67.726000                0.252164             0.072759285            0.0112770997                 1000
                1000 (<-)            148.399000                0.296095             0.074375684            0.0093633439                 1000
                2000 (<-)            339.463000                0.362966             0.079370561            0.0081161572                 1000
                4000                 904.000000                0.517982             0.098605795            0.0081900102                    1
                8000                1813.000000                0.556694             0.092256892            0.0062240321                    1
               16000                3823.000000                0.629066             0.090755367            0.0049732045                    1
               32000                8713.000000                0.768303             0.096494540            0.0042949464                    1
										    Cte:0.09
(<-)	: Filas con tiempos inferiores a 500 microsegundos(calculados midiendo los tiempos en 1000 ejecuciones que le llamamos k y haciendo la media de los mismos)
(*)	: Valores anómalos

ORDENACION POR SHELL *****inicializacion ascendente*****
                  n                    t(n)                  t(n)/n^0.9             t(n)/n^1.1              t(n)/n^1.4                     k

                 500 (<-)             22.940000                0.085412             0.024644863            0.0038197541                 1000
                1000 (<-)             49.775000                0.099314             0.024946595            0.0031405902                 1000
                2000 (<-)            101.261000                0.108272             0.023676048            0.0024210303                 1000
                4000 (<-)            229.964000                0.131767             0.025083831            0.0020834154                 1000
                8000                 504.315000                0.154853             0.025662733            0.0017313143                    1
               16000                1156.000000                0.190217             0.027442638            0.0015037992                    1
               32000                2390.000000                0.210748             0.026468719            0.0011781157                    1
               64000                5769.000000                0.272608             0.029805922            0.0010775777                    1
										    Cte:0.026
(<-)	: Filas con tiempos inferiores a 500 microsegundos(calculados midiendo los tiempos en 1000 ejecuciones que le llamamos k y haciendo la media de los mismos)
(*)	: Valores anómalos

ORDENACION POR SHELL *****inicializacion descendente*****
                  n                    t(n)                    t(n)/n^1             t(n)/n^1.2              t(n)/n^1.4                     k

                 500 (<-)             31.398000                0.062796             0.018119157            0.0052281011                 1000
                1000 (<-)             71.689000                0.071689             0.018007463            0.0045232701                 1000
                2000 (<-)            164.407000                0.082203             0.017975638            0.0039307761                 1000
                4000 (<-)            327.094000                0.081773             0.015566845            0.0029633885                 1000
                8000                 819.000000                0.102375             0.016965862            0.0028116284                    1
               16000                1890.000000                0.118125             0.017041893            0.0024586337                    1
               32000                4038.000000                0.126188             0.015848433            0.0019904732                    1
										    Cte:0.016
(<-)	: Filas con tiempos inferiores a 500 microsegundos(calculados midiendo los tiempos en 1000 ejecuciones que le llamamos k y haciendo la media de los mismos)
(*)	: Valores anómalos

6. CONCLUSIONES

* Para la ordenación por inserción, el vector ordenado ya de manera ascendente tiene una
complejidad similar a la teórica, O(n), puesto que ya está ordenado y nunca entrará en el bucle 
for, siendo O(n^2) ya que estas si que entrarían en el bucle . Para la ordenación de shell,
el mejor caso y el caso medio tienen una complejidad similar O(n log n) mientras
que el peor caso se aleja un poco,estas tambien se asemejan a las complejidades teóricas .

* Vemos también que, para ambos algoritmos, ordenar un vector ya ordenado de forma ascendente,
requiere mucho menos tiempo puesto que, como bien ya se dice, ya está ordenado.
El que más tiempo requiere es el vector ordenado de forma descendente, por la razón contraria.

* En difinitiva una vez analizadas las complejidades llegamos a la conclusion que el algoriritmo
de ordenacion shell es mas eficiente en los casos medio y descendente , mientras que el algoritmo
por insercción seria mas eficiciente cuando el vector esta ordenado o casi ordenado . Por eso se
suele usar como ad-hoc para mejorar la eficiencia de otros algoritmos cuando el vector esta casi ordenado.
